/**
 * 文 件 名:  NetworkHardDiskController.java
 * 版    权:  TX Workgroup . Copyright YYYY-YYYY,  All rights reserved
 * 描    述:  <描述>
 * 修 改 人:  王科（小）
 * 修改时间:  Aug 30, 2012
 * <修改描述:>
 */
package cn.dgg.CRM365.web.owners;

import java.io.File;
import java.io.FilenameFilter;
import java.sql.Timestamp;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import cn.dgg.CRM365.domain.authority.User;
import cn.dgg.CRM365.domain.owners.Employee;
import cn.dgg.CRM365.util.commonUtil.StaticValues;
import cn.dgg.CRM365.util.commonUtil.StringUtil;
import cn.dgg.CRM365.util.commonUtil.UploadFile;
import cn.dgg.CRM365.util.mvc.MvcUtil;
import cn.dgg.CRM365.util.mvc.view.MimeBytesView;
import cn.dgg.CRM365.util.orm.ICommonDAO;
import cn.dgg.CRM365.util.page.GridLoadParams;

/**
 * <功能简述> 网络硬盘 <功能详细描述>
 * 
 * @author 王科（小）
 * @version [版本号, Aug 30, 2012]
 * @see [相关类/方法]
 * @since [产品/模块版本]
 */
@Controller
@RequestMapping("/nwhd")
public class NetworkHardDiskController {
	File[] dataList = null;

	File f = null;

	private Properties propertie;

	@Autowired
	@Qualifier("commonDAOProxy")
	ICommonDAO<Employee> empdao;

	@RequestMapping("/jumpToNetworkHardDiskPage.do")
	public ModelAndView jumpToNetworkHardDiskPage() {
		return new ModelAndView("owners/networkHardDisk");
	}

	/**
	 * 
	 * <功能简述> 下载文件 <功能详细描述>
	 * 
	 * @param fileName
	 * @param response
	 * @return [参数说明]
	 * 
	 * @return ModelAndView [返回类型说明]
	 * @exception throws
	 *                [异常类型] [异常说明]
	 * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/downLoadFile.do")
	public ModelAndView downLoadFile(@RequestParam("_fileName")
	String fileName, HttpServletRequest request) {
		Map<String, Object> model = null;
		try {

			User sessionUser = (User) request.getSession().getAttribute(
					StaticValues.USER_SESSION);
			List<Employee> list = null;
			String requestPath = request.getRealPath("");
			if (sessionUser.getEmployee() != null
					&& !"".equals(sessionUser.getEmployee())) {
				list = empdao.findByHql("from Employee e where e.id=?",
						new Object[] { sessionUser.getEmployee().getId() });
			}

			UploadFile file = new UploadFile();
			propertie = file.getPropertie();
			String filePath = requestPath + "//"
					+ propertie.getProperty(StaticValues.UPLOAD_PROP_NAME)
					+ "//" + list.get(0).getIDcard();
			String name = java.net.URLDecoder.decode(fileName, "UTF-8");
			UploadFile uploadFile = new UploadFile();
			model = uploadFile.downloadAttachment(name, filePath);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView(new MimeBytesView(), model);
	}

	/**
	 * 
	 * <功能简述> 加载登录人的网络硬盘文件列表 <功能详细描述>
	 * 
	 * @param gridLoadParams
	 * @param request
	 * @return [参数说明]
	 * 
	 * @return ModelAndView [返回类型说明]
	 * @exception throws
	 *                [异常类型] [异常说明]
	 * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/loadFile.do")
	public ModelAndView loadFile(@ModelAttribute("params")
	GridLoadParams gridLoadParams, HttpServletRequest request,
			@RequestParam("_fileName")
			String fileName) {
		JSONObject jsonObject = new JSONObject();
		JSONArray data = new JSONArray();
		try {
			User sessionUser = (User) request.getSession().getAttribute(
					StaticValues.USER_SESSION);
			List<Employee> list = null;
			String requestPath = request.getRealPath("");
			if (sessionUser.getEmployee() != null
					&& !"".equals(sessionUser.getEmployee())) {
				list = empdao.findByHql("from Employee e where e.id=?",
						new Object[] { sessionUser.getEmployee().getId() });
			}
			if (list == null || list.size() == 0) {
				jsonObject.element("success", false);
				jsonObject.element("msg", "该用户没有与员工关联，读取网络硬盘失败！");
				return MvcUtil.jsonObjectModelAndView(jsonObject);
			}
			UploadFile file = new UploadFile();
			propertie = file.getPropertie();
			String filePath = propertie
					.getProperty(StaticValues.UPLOAD_PROP_NAME);
			f = new File(requestPath + "//" + filePath + "//"
					+ list.get(0).getIDcard());
			if (!f.exists()) {
				f.mkdir();
			}
			if (f.exists()) {
				dataList = f.listFiles();
				for (int i = 0; i < dataList.length; i++) {
					JSONObject item = new JSONObject();
					// System.out.println("filename-->"+dataList[i].getName());
					if (fileName != null && !"".equals(fileName)) {
						int index = dataList[i].getName().indexOf(fileName);
						if (index >= 0) {
							if (dataList[i].isFile()) {
								item.element("filename", MvcUtil
										.toJsonString(dataList[i].getName()));
								item.element("filesize",
										MvcUtil.toJsonString(((dataList[i]
												.length() / 1024) + "k")));
								item
										.element(
												"filedate",
												MvcUtil
														.toJsonString(StringUtil
																.convertDate(new Timestamp(
																		(dataList[i]
																				.lastModified()))
																		.toString())));
								data.add(item);
							}
						}
					} else {
						item.element("filename", MvcUtil
								.toJsonString(dataList[i].getName()));
						item
								.element("filesize",
										MvcUtil.toJsonString(((dataList[i]
												.length() / 1024) + "k")));
						item.element("filedate", MvcUtil
								.toJsonString(StringUtil
										.convertDate(new Timestamp((dataList[i]
												.lastModified())).toString())));
						data.add(item);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			jsonObject.element("success", false);
			jsonObject.element("msg", "数据异常!");
		}

		jsonObject.element("data", data);
		return MvcUtil.jsonObjectModelAndView(jsonObject);
	}

	/**
	 * 
	 * <功能简述> 上传文件 <功能详细描述>
	 * 
	 * @param request
	 * @param multipartFile
	 * @return [参数说明]
	 * 
	 * @return ModelAndView [返回类型说明]
	 * @exception throws
	 *                [异常类型] [异常说明]
	 * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/upLoadFile.do")
	public ModelAndView upLoadFile(HttpServletRequest request,
			@RequestParam("uploadFilePath")
			MultipartFile multipartFile) {
		JSONObject jsonObject = new JSONObject();
		UploadFile file = new UploadFile();
		try {
			User sessionUser = (User) request.getSession().getAttribute(
					StaticValues.USER_SESSION);
			List<Employee> list = null;

			String requestPath = request.getRealPath("");

			if (sessionUser.getEmployee() != null
					&& !"".equals(sessionUser.getEmployee())) {
				list = empdao.findByHql("from Employee e where e.id=?",
						new Object[] { sessionUser.getEmployee().getId() });
			}
			if (list == null || list.size() == 0) {
				jsonObject.element("success", false);
				jsonObject.element("msg", "该用户没有与员工关联，不能上传文件！");
				return MvcUtil.jsonObjectModelAndView(jsonObject);
			}

			Long upLoadFileSize = multipartFile.getSize();
			double upLoadSize = file.FormetFileSize(upLoadFileSize);
			if (upLoadSize > 5) {
				jsonObject.element("success", false);
				jsonObject.element("msg", "上传的文件大于5M！请重新上传！");
				return MvcUtil.jsonObjectModelAndView(jsonObject);
			}
			Properties propertie = file.getPropertie();
			String filePath = requestPath + "//"
					+ propertie.getProperty(StaticValues.UPLOAD_PROP_NAME)
					+ "//" + list.get(0).getIDcard();
			f = new File(filePath);
			Long fileSize = file.getFileSize(f);
			double size = file.FormetFileSize(fileSize);
			if (size < 10) {
				file.SaveFile(multipartFile, filePath);
				jsonObject.element("success", true);
			} else {
				jsonObject.element("success", false);
				jsonObject.element("msg", "文件夹大小大于10M！请重新上传！");
				return MvcUtil.jsonObjectModelAndView(jsonObject);
			}
		} catch (Exception e) {
			e.printStackTrace();
			jsonObject.element("success", false);
			jsonObject.element("msg", "数据异常!");
		}
		return MvcUtil.jsonObjectModelAndView(jsonObject);
	}

	/**
	 * 
	 * <功能简述> 删除文件 <功能详细描述>
	 * 
	 * @param filenames
	 * @param request
	 * @return [参数说明]
	 * 
	 * @return ModelAndView [返回类型说明]
	 * @exception throws
	 *                [异常类型] [异常说明]
	 * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/deleteFiles.do")
	public ModelAndView deleteFiles(@RequestParam("_filenames")
	String filenames, HttpServletRequest request) {
		JSONObject model = new JSONObject();
		try {
			User sessionUser = (User) request.getSession().getAttribute(
					StaticValues.USER_SESSION);
			List<Employee> list = null;

			if (sessionUser.getEmployee() != null
					&& !"".equals(sessionUser.getEmployee())) {
				list = empdao.findByHql("from Employee e where e.id=?",
						new Object[] { sessionUser.getEmployee().getId() });
			}
			String requestPath = request.getRealPath("");

			UploadFile file = new UploadFile();
			Properties propertie = file.getPropertie();
			String filePath = requestPath + "//"
					+ propertie.getProperty(StaticValues.UPLOAD_PROP_NAME)
					+ "//" + list.get(0).getIDcard();
			if (filenames != null) {
				int sum = 0;
				String[] idAry = filenames.split(",");
				for (int i = 0; i < idAry.length; i++) {
					f = new File(filePath + "//" + idAry[i]);
					// File f = f = new
					// File(request.getRealPath("")+"/eordownload/"+idAry[i]);
					boolean b = f.delete();
					if (b) {
						sum++;
					}
				}

				model.element("success", true);
				model.element("message", "已删除" + sum + "条数据.");
			} else {
				model.element("success", false);
				model.element("message", "参数不正确.");
			}
		} catch (Exception e) {
			e.printStackTrace();
			model.element("success", false);
			model.element("message", "数据异常.");
		}

		return MvcUtil.jsonObjectModelAndView(model);
	}

}
