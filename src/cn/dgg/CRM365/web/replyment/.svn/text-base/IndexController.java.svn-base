package cn.dgg.CRM365.web.replyment;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.hibernate.classic.Session;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import cn.dgg.CRM365.domain.authority.User;
import cn.dgg.CRM365.domain.owners.Employee;
import cn.dgg.CRM365.domain.resources.ResourcesTrack;
import cn.dgg.CRM365.domain.resourcesManage.Client;
import cn.dgg.CRM365.domain.resourcesManage.ClientUser;
import cn.dgg.CRM365.domain.resourcesManage.SeeClient;
import cn.dgg.CRM365.util.commonUtil.StaticValues;
import cn.dgg.CRM365.util.mvc.MvcUtil;
import cn.dgg.CRM365.util.orm.ICommonDAO;
import cn.dgg.CRM365.util.page.GridLoadParams;
import cn.dgg.CRM365.util.page.Pagination;
import cn.dgg.CRM365.web.resources.ResourcesTrackController;

/**
 * 页面显示首页操作
  * <功能简述>
  * <功能详细描述>
  * 
  * @author  chenqin
  * @version  [版本号, Dec 24, 2012]
  * @see  [相关类/方法]
  * @since  [产品/模块版本]
 */
@SuppressWarnings("all")
@RequestMapping("/index")
@Controller
public class IndexController {

	@Autowired
	@Qualifier("commonDAOProxy")
	ICommonDAO<Client> cdao;
	
	@Autowired
	@Qualifier("commonDAOProxy")
	ICommonDAO<ClientUser> cudao;
	
	@Autowired
	@Qualifier("commonDAOProxy")
	ICommonDAO<ResourcesTrack> rtDao;
	
	@Autowired
	@Qualifier("commonDAOProxy")
	ICommonDAO<SeeClient> scDao;
	
	@Autowired
	@Qualifier("commonDAOProxy")
	ICommonDAO<Object[]> odao;
	
	@Autowired
	@Qualifier("commonDAOProxy")
	ICommonDAO<Object> objdao;
	
	
	String oppType = "";//贷款类型
	String dkje = "";//贷款金额
	String khmz ="";//客户名字
	
	/**
	 * 查找今日需完成的商机（今日的工作计划）
	  *<功能简述>
	  *<功能详细描述>
	  * @return [参数说明]
	  * 
	  * @return ModelAndView [返回类型说明]
	  * @exception throws [异常类型] [异常说明]
	  * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/findTodayWorkPlan")
	public ModelAndView findTodayWorkPlan(@ModelAttribute("params")
			GridLoadParams gridLoadParams, HttpServletRequest request, @RequestParam("conditions") String condition){
		JSONObject jsonObject = new JSONObject();
		Pagination pagination = new Pagination();
		pagination.set(gridLoadParams.getStart(), gridLoadParams.getLimit());
		User userSession = null;
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		String nowDate = df.format(new Date());
		String hql = "select rt.plantime, rt.workplan, rt.id, c.id, c.oppType, c.clientName, c.contactTel, c.loanAmount " +
				"from ResourcesTrack rt, Client c where c.id = rt.client_name";	//根据权限查询
		//根据当前时间查询
		StringBuffer wherehql = new StringBuffer();
		String ruleDe = null;
		try {
			if(request.getSession() != null){
				userSession = (User) request.getSession().getAttribute("userSession");
				if(userSession.getEmployee() != null){
					Long lDepartment = userSession.getEmployee().getDepartment().getId();
					ruleDe = userSession.getRole().getRoleCode();
					Long thisUserId = userSession.getId();
					//如果是部门经理，就根据部门id查找该部门下的内容
					if("201202".equals(ruleDe)){
						wherehql.append(" and c.follower.employee.department = ").append(lDepartment).append(" and c.clientStatus <> '3'");
					}
					//如果是当前登录人，就根据登录Id查找该用户的信息
					if("201203".equals(ruleDe)){
						wherehql.append(" and c.follower = ").append(thisUserId).append(" and c.clientStatus <> '3'");
					}
				}
				if(condition != null && !"".equals(condition)){
					JSONObject json = JSONObject.fromObject(condition);
					String resoudep = String.valueOf(json.get("resoudep"));
					String resouemp = String.valueOf(json.get("resouemp"));
					String opp = String.valueOf(json.get("opp"));
					String plan = String.valueOf(json.get("plan"));
					String client_source = String.valueOf(json.get("client_source"));
					if(plan != null && !"".equals(plan)){
						wherehql.append(" and rt.plantime like '").append(plan).append("%'");
					}else{
						wherehql.append(" and rt.plantime like '").append(nowDate).append("%'");
					}
					if(resoudep!=null && !"".equals(resoudep)){
						wherehql.append(" and c.follower.employee.department=").append(resoudep);
					}
					if(resouemp != null && !"".equals(resouemp)){
						wherehql.append(" and c.follower.employee=").append(resouemp);
					}
					if(opp != null && !"".equals(opp)){
						wherehql.append(" and c.oppType = ").append(opp);
					}if(client_source != null && !"".equals(client_source)){
						wherehql.append(" and c.clientSourse = ").append(Long.parseLong(client_source));
					}
				}else{
					wherehql.append(" and rt.plantime like '").append(nowDate).append("%'");
				}
				wherehql.append(" order by rt.plantime, rt.rtid");
				List<Object[]> rts = odao.findAll(hql + wherehql, pagination);
				jsonObject.element("totalCount", pagination.getTotalResults());
				JSONArray data = new JSONArray();
				if (rts.size() > 0) {
					for (Object[] field : rts) {
						JSONObject item = new JSONObject();
						item.element("rtid", MvcUtil.toJsonString(field[2]));
						item.element("id", MvcUtil.toJsonString(field[3]));
						if("1".equals(field[4])){//商机类型(1为房贷、2为信贷、3为短借、4为企贷)
							oppType = "房贷";
						}else if("2".equals(field[4])){
							oppType = "信贷";
						}else if("3".equals(field[4])){
							oppType = "短借";
						}else if("4".equals(field[4])){	
							oppType = "企贷";
						}else if("".equals(field[4]) || field[4] == null){
							oppType = "";
						}
						if("".equals(field[7])||field[7]==null){
							dkje = "";
						}else{
							dkje = field[7].toString();
						}
						if("".equals(field[5])||field[5]==null){
							khmz = "";
						}else{
							khmz = field[5].toString();
						}
						item.element("clientName", MvcUtil.toJsonString(khmz+oppType+dkje));
						if("201203".equals(ruleDe)){
							item.element("resourcespeople", MvcUtil.toJsonString(MvcUtil.toJsonString(userSession.getEmployee().getDepartment().getDepaName())
									+userSession.getEmployee().getName()));
						}else{
							hql = "select c.follower from Client c where c.id = " + Long.parseLong(String.valueOf(field[3]));
							List<Object> objList = objdao.findAll(hql);
							if(objList.size() > 0){
								userSession = (User)(objList.get(0));
								if(userSession != null && !"".equals(userSession)){
									if(userSession.getEmployee() != null){
										item.element("resourcespeople", MvcUtil.toJsonString(MvcUtil.toJsonString(userSession.getEmployee().getDepartment().getDepaName())
												+userSession.getEmployee().getName()));
									}else{
										item.element("resourcespeople", MvcUtil.toJsonString(MvcUtil.toJsonString(userSession.getCustomerName())));
									}
								}
							}
						}
						item.element("workPlan", MvcUtil.toJsonString(field[1]));
						item.element("telephone", MvcUtil.toJsonString(field[6]));
						item.element("plantime", MvcUtil.toJsonString(field[0]));//计划时间
						data.add(item);
					}
				}
				jsonObject.element("data", data);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return MvcUtil.jsonObjectModelAndView(jsonObject);
	}
	
	/**
	 * 首页今日新增商机跳转到操作页面
	  *<功能简述>
	  *<功能详细描述>
	  * @param gridLoadParams
	  * @param request
	  * @param response
	  * @return [参数说明]
	  * 
	  * @return ModelAndView [返回类型说明]
	  * @exception throws [异常类型] [异常说明]
	  * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/findByToday")
	public ModelAndView findByToday(HttpServletRequest request, HttpServletResponse response) {
		String tid = null;;
		String theCurrent = null;
		try {
			tid = request.getParameter("tid");
			theCurrent = request.getParameter("theCurrent");
			String[] tids = tid.split(",");
			StringBuffer sb = new StringBuffer(" where 1=1");
			String hql = "from Client c";	//根据传过来的客户ID查找客户信息保存在中间表
			String hql3 = null;
			if(tids.length > 1){
				sb.append(" and c.id = ").append(Long.parseLong(tids[0]));
				//查找中间表中是否存在该客户的信息，如果存在则直接跳页面，如果不存在，则进行判断
				hql3 = " from SeeClient c where c.c_id = " + Long.parseLong(tids[0]);	
			}else{
				sb.append(" and c.id = ").append(Long.parseLong(tid));
				hql3 = " from SeeClient c where c.c_id = " + Long.parseLong(tid);
			}
			//查找该用户已点击的个数
			String hql1 = "select count(c.id) from SeeClient c where c.u_id =?";
			//查找信息，删除第一个客户
			String hql2 = " from SeeClient c where c.u_id =? order by c.id";
			User userSession = (User)request.getSession().getAttribute("userSession");
			int count = 0;
			String oppType = null;
			List<Client> clients1 = cdao.findAll(hql3);
			if(clients1.size() > 0){
				return new ModelAndView("resourcestrack/resourcestrack", tid, theCurrent);
			}else{
				 List<SeeClient> seeClient = scDao.findByHql(hql1, new Object[]{String.valueOf(userSession.getId())});
				 List<SeeClient> seeClient2 = scDao.findByHql(hql2, new Object[]{String.valueOf(userSession.getId())});
				 if(seeClient.size()> 0 && seeClient.get(0) != null){
						count = Integer.parseInt(String.valueOf(seeClient.get(0)));
						if(count > 4 && seeClient2.get(0) != null){
							SeeClient cli = seeClient2.get(0);
							scDao.delete(cli);
						}
					}
					List<Client> clients  = cdao.findAll(hql + sb);
					SeeClient seeClient1 = new SeeClient();
					if(clients.size() > 0 && clients.get(0) != null){
						if("1".equals(clients.get(0).getOppType())){//商机类型(1为房贷、2为信贷、3为短借、4为企贷)
							oppType = "房贷"; 
						}else if("2".equals(clients.get(0).getOppType())){
							oppType = "信贷";
						}else if("3".equals(clients.get(0).getOppType())){
							oppType = "短借";
						}else if("4".equals(clients.get(0).getOppType())){	
							oppType = "企贷";
						}
						else if("".equals(clients.get(0).getOppType())||clients.get(0).getOppType()==null){	
							oppType = "";
						}
						String aa = null;
						if(clients.get(0).getClientName() != null){
							aa = clients.get(0).getClientName();
						}
						seeClient1.setC_name(aa + oppType);
						//点击首页的数据时，保存数据到数据库中，返回首页时查询显示首页
						seeClient1.setC_id(tid);
						seeClient1.setU_id(String.valueOf(userSession.getId()));
						scDao.save(seeClient1);
					}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("resourcestrack/resourcestrack", tid, theCurrent);
	}
	
	/**
	 * 查找前五个点击过的客户
	  *<功能简述>
	  *<功能详细描述>
	  * @return [参数说明]
	  * 
	  * @return ModelAndView [返回类型说明]
	  * @exception throws [异常类型] [异常说明]
	  * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/showFiveClient.do")
	public ModelAndView showFiveClient(HttpServletRequest request){
		JSONObject jsonObject = new JSONObject();
		User userSession = (User) request.getSession().getAttribute("userSession");
		String hql = "from SeeClient c where c.u_id = ?";
		try {
			List<SeeClient> seeClients = scDao.findByHql(hql, new Object[]{String.valueOf(userSession.getId())});
			JSONArray data = new JSONArray();
			if (seeClients.size() > 0) {
				for (SeeClient field : seeClients) {
					JSONObject item = new JSONObject();
					item.element("id", field.getId());
					item.element("c_id", field.getC_id());
					item.element("c_name", field.getC_name());
					data.add(item);
				}
				jsonObject.element("data", data);
			}
		} catch (Exception e) {
		}
		return MvcUtil.jsonObjectModelAndView(jsonObject);
	}
	/**
	 * 查找提醒的客户资源
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/findWarnClient")
	public ModelAndView findWarnClient(HttpServletRequest request, HttpServletResponse response) {
		String flag = request.getParameter("flag");
		return new ModelAndView("resourcestrack/resourcestrack", flag, null);
	}
	/**
	 * 首页还款管理
	  *<功能简述>
	  *<功能详细描述>
	  * @param gridLoadParams
	  * @param request
	  * @param response
	  * @return [参数说明]
	  * 
	  * @return ModelAndView [返回类型说明]
	  * @exception throws [异常类型] [异常说明]
	  * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/findByRefund")
	public ModelAndView findByRefund(@ModelAttribute("params")
			GridLoadParams gridLoadParams, HttpServletRequest request,
			HttpServletResponse response) {
		String _fid = request.getParameter("_fid");
		return new ModelAndView("replyment/loanDetailInfo", _fid, null);
	}
	
	/**
	
	 * 查找今日新增商机
	  *<功能简述>
	  *<功能详细描述>
	  * @param gridLoadParams
	  * @param request
	  * @return [参数说明]
	  * 
	  * @return ModelAndView [返回类型说明]
	  * @exception throws [异常类型] [异常说明]
	  * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/todayAddClient")
	public ModelAndView todayAddClient(@ModelAttribute("params")
			GridLoadParams gridLoadParams, HttpServletRequest request, @RequestParam("conditions") String condition){
		JSONObject jsonObject = new JSONObject();
		Pagination pagination = new Pagination();
		pagination.set(gridLoadParams.getStart(), gridLoadParams.getLimit());
		User userSession = (User) request.getSession().getAttribute("userSession");
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
		String nowDate = df.format(new Date());
		//根据当前时间查询
		StringBuffer wherehql = new StringBuffer(" and 1=1");
		Long lDepartment = null;	//得到当前登录人的部门信息
		String ruleDe = null;	//得到当前登录人的角色代码 
		Long thisUserId = null;	//	得到当前登录人的Id
		String hql = "from Client cu where 2=2";
		if(userSession.getEmployee() != null){
			lDepartment = userSession.getEmployee().getDepartment().getId();
			ruleDe = userSession.getRole().getRoleCode();
			thisUserId = userSession.getId();
			//如果是部门经理，就根据部门id查找该部门下的内容
			if(ruleDe.equals("201202")){
				wherehql.append(" and cu.follower.employee.department.id = ").append(lDepartment).append(" and cu.clientStatus <> '3'");
			}
			//如果是员工，就根据当前登录人进行查询
			else if(ruleDe.equals("201203")){
				wherehql.append(" and cu.follower.id = ").append(thisUserId).append(" and cu.clientStatus <> '3'");
			}
		}
		try {
			if(condition != null && !"".equals(condition)){
				JSONObject json = JSONObject.fromObject(condition);
				String clientDep = String.valueOf(json.get("clientDep"));
				String clientEmp = String.valueOf(json.get("clientEmp"));
				String newTime = String.valueOf(json.get("newTime"));
				String opp = String.valueOf(json.get("opp"));
				String client_source = String.valueOf(json.get("client_source"));
				if(clientDep!=null && !"".equals(clientDep)){
					wherehql.append(" and cu.follower.employee.department.id=").append(clientDep);
				}
				if(clientEmp!=null && !"".equals(clientEmp)){
					wherehql.append(" and cu.follower.employee.id=").append(clientEmp);
				}
				if(newTime!=null && !"".equals(newTime)){
					wherehql.append(" and cu.assignDate like '").append(newTime).append("%'");
				}
				if(opp != null && !"".equals(opp)){
					wherehql.append(" and cu.oppType = ").append(opp);
				}
				if(client_source != null && !"".equals(client_source)){
					wherehql.append(" and cu.clientSourse = ").append(Long.parseLong(client_source));
				}
			
			}
			wherehql.append(" and (cu.assignDate like '").append(nowDate).append("%' or cu.assignTime like '").append(nowDate).append("%'").append(")");
			List<Client> clientUsers = cdao.findAll(hql + wherehql, pagination);
			jsonObject.element("totalCount", pagination.getTotalResults());
			JSONArray data = new JSONArray();
			if (clientUsers.size() > 0) {
				for (Client field : clientUsers) {
					JSONObject item = new JSONObject();
					item.element("id", field.getId());
					item.element("c1id", field.getId());
					if(field.getFollower() != null && !"".equals(field.getFollower())){
						if(field.getFollower().getEmployee() != null){
							item.element("userName", field.getFollower().getEmployee().getDepartment().getDepaName()+field.getFollower().getEmployee().getName());
						}
					}
					item.element("contactTel", field.getContactTel());
					if("1".equals(field.getSignPossible())){//签单可能性(1为100%、2为80%、3为50%、4为0%)
						item.element("signPossible", MvcUtil.toJsonString("100%"));
					}else if("2".equals(field.getSignPossible())){
						item.element("signPossible", MvcUtil.toJsonString("80%"));
					}else if("3".equals(field.getSignPossible())){
						item.element("signPossible", MvcUtil.toJsonString("50%"));
					}else if("4".equals(field.getSignPossible())){
						item.element("signPossible", MvcUtil.toJsonString("10%"));
					}else if("5".equals(field.getSignPossible())){
						item.element("signPossible", MvcUtil.toJsonString("0%"));
					}
					if("1".equals(field.getOppType())){//商机类型(1为房贷、2为信贷、3为短借、4为企贷)
						oppType = "房贷";
					}else if("2".equals(field.getOppType())){
						oppType = "信贷";
					}else if("3".equals(field.getOppType())){
						oppType = "短借";
					}else if("4".equals(field.getOppType())){	
						oppType = "企贷";
					}
					else if("".equals(field.getOppType())||field.getOppType()==null){	
						oppType = "";
					}
					if("".equals(field.getLoanAmount())||field.getLoanAmount()==null)
					{
						dkje="";
					}else{
						dkje=field.getLoanAmount() + "万";
					}
					if("".equals(field.getClientName())||field.getClientName()==null){
						khmz="";
					}else{
						khmz=field.getClientName();
					}
					item.element("clientName", khmz+oppType+dkje);
					item.element("assignDate",MvcUtil.toJsonString(field.getAssignDate()));//创建日期
					if(field.getClientSourse() != null){
						item.element("clientSourse", MvcUtil.toJsonString(field.getClientSourse().getName()));
					}
					item.element("remark",field.getRemark());
					data.add(item);
				}
			}
			jsonObject.element("data", data);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return MvcUtil.jsonObjectModelAndView(jsonObject);
	}
	/**
	 * 查找已签单商机
	  *<功能简述>
	  *<功能详细描述>
	  * @param gridLoadParams
	  * @param request
	  * @param state
	  * @return [参数说明]
	  * 
	  * @return ModelAndView [返回类型说明]
	  * @exception throws [异常类型] [异常说明]
	  * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/signedClient")
	public ModelAndView signedClient(@ModelAttribute("params")
			GridLoadParams gridLoadParams, HttpServletRequest request, @RequestParam("conditions") String condition){
		JSONObject jsonObject = new JSONObject();
		Pagination pagination = new Pagination();
		pagination.set(gridLoadParams.getStart(),gridLoadParams.getLimit());
		User userSession = null;
		Long lDepartment = null;	//得到当前登录人的部门信息
		String ruleDe = null;	//得到当前登录人的角色代码 
		Long thisUserId = null;	//	得到当前登录人的Id
		StringBuffer sb = new StringBuffer("");
		String hql = "select c.id, c.follower, c.oppType, c.loanAmount, c.clientName, c.contactTel, c.signTime " +
				"from Client c where c.clientStatus = '1'";
		try {
			if(request.getSession() != null){
				userSession = (User) request.getSession().getAttribute("userSession");
				if(userSession.getEmployee() != null){
					lDepartment = userSession.getEmployee().getDepartment().getId();
					ruleDe = userSession.getRole().getRoleCode();
					thisUserId = userSession.getId();
					//如果是部门经理，就根据部门id查找该部门下的内容
					if(ruleDe.equals("201202")){
						sb.append(" and c.follower.employee.department.id = ").append(lDepartment);
					}
					//如果是员工，就根据当前登录人进行查询
					 if(ruleDe.equals("201203")){
						 sb.append(" and c.follower.id = ").append(thisUserId);
					}
				}
				if(condition != null && !"".equals(condition)){
					JSONObject json = JSONObject.fromObject(condition);
					String signedDep = String.valueOf(json.get("signedDep"));
					String signedEmp = String.valueOf(json.get("signedEmp"));
					String qdtime = String.valueOf(json.get("qdtime"));
					String opp = String.valueOf(json.get("opp"));
					String client_source = String.valueOf(json.get("client_source"));
					if(signedDep!=null&&!"".equals(signedDep)){
						sb.append(" and c.follower.department.id=").append(signedDep);
					}
					if(signedEmp!=null&&!"".equals(signedEmp)){
						sb.append(" and c.follower.employee.id=").append(signedEmp);
					}
					if(qdtime!=null&&!"".equals(qdtime)){
						sb.append(" and c.signTime like '").append(qdtime).append("%'");
					}
					if(opp != null && !"".equals(opp)){
						sb.append(" and c.oppType = ").append(opp);
					}if(client_source != null && !"".equals(client_source)){
						sb.append(" and c.clientSourse.id = ").append(Long.parseLong(client_source));
					}
				}
				sb.append(" order by c.signTime desc");
				List<Object[]> clientUsers = odao.findAll(hql + sb, pagination);
				jsonObject.element("totalCount", pagination.getTotalResults());
				System.out.println(pagination.getTotalResults());
				JSONArray data = new JSONArray();
				User user = null;
				if (clientUsers.size() > 0) {
					System.out.println(clientUsers.size());
					for (Object[] obj : clientUsers) {
						JSONObject item = new JSONObject();
						item.element("id", obj[0]);
						user = (User)obj[1];
						if(user != null && user.getEmployee() != null){
							item.element("userName",user.getEmployee().getDepartment().getDepaName()+"："+ user.getEmployee().getName());
							item.element("user_depaName", user.getEmployee().getDepartment().getDepaName());
						}
						if("1".equals(obj[2])){//商机类型(1为房贷、2为信贷、3为短借、4为企贷)
							oppType = "房贷";
						}else if("2".equals(obj[2])){
							oppType = "信贷";
						}else if("3".equals(obj[2])){
							oppType = "短借";
						}else if("4".equals(obj[2])){	
							oppType = "企贷";
						}else if("".equals(obj[2]) || obj[2]==null){
							oppType = " ";
						}
						if("".equals(obj[3])||obj[3]==null){
							dkje = "";
						}else{
							dkje = obj[3] + "万";
						}
						if("".equals(obj[4])||obj[4]==null){
							khmz = "";
						}else{
							khmz = obj[4].toString();
						}
						if("201205".equals(ruleDe)){
							item.element("contactTel", MvcUtil.toJsonString("******"));
						}else{
							item.element("contactTel", obj[5]);
						}
						item.element("clientName",khmz+oppType+dkje);
						item.element("signingtime", MvcUtil.toJsonString(obj[6]));
						data.add(item);
					}
				}
				jsonObject.element("data", data);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return MvcUtil.jsonObjectModelAndView(jsonObject);
	}
	
	/**
	 * 百度搜索
	  *<功能简述>
	  *<功能详细描述>
	  * @param cusTelOrName	 客户电话,客户名称
	  * @return [参数说明]
	  * 
	  * @return ModelAndView [返回类型说明]
	  * @exception throws [异常类型] [异常说明]
	  * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/findByCusNameOrTel")
	public ModelAndView findByCusNameOrTel(@ModelAttribute("params")
			GridLoadParams gridLoadParams, HttpServletRequest request,@RequestParam("conditions") String conditions){
		JSONObject jsonObject = new JSONObject();
		Pagination pagination = new Pagination();
		pagination.set(gridLoadParams.getStart(), gridLoadParams.getLimit());
		User userSession = null;
		Long lDepartment = null;	//得到当前登录人的部门信息
		String ruleDe = null;	//得到当前登录人的角色代码 
		List<Client> cuser = null;//资源分配 中间表（客户）
		List<Client> clients = null; //客户
		StringBuffer sb = new StringBuffer();
		String hql = "from Client cu where";
		Employee emp = null;
		if(request.getSession() != null){
			try {
				if(conditions != null && !"".equals(conditions)){
					JSONObject json = JSONObject.fromObject(conditions);
					String cusTelOrName = String.valueOf(json.get("cusMes"));
					if(cusTelOrName != null && !"".equals(cusTelOrName)){
						sb.append(" (cu.clientName like '%").append(cusTelOrName).append("%'");
						sb.append(" or cu.contactTel like '%").append(cusTelOrName).append("%'");
						sb.append(" or cu.spareTel1 like '%").append(cusTelOrName).append("%'");
						sb.append(" or cu.spareTel2 like '%").append(cusTelOrName).append("%')");
						userSession = (User) request.getSession().getAttribute("userSession");
						ruleDe = userSession.getRole().getRoleCode();//得到角色代码
						if(ruleDe.equals("201202")){ 	//部门经理
							sb.append(" and (cu.follower.employee.department.id ='").append(userSession.getEmployee().getDepartment().getId()).append("'").append(" or cu.clientStatus = '3')");
						}else if(ruleDe.equals("201203")){	//员工
							sb.append(" and (cu.follower.id ='").append(userSession.getId()).append("'").append(" or cu.clientStatus = '3')");
						}
						cuser = cdao.findAll(hql+sb, pagination);
						jsonObject.element("totalCount", pagination.getTotalResults());
						JSONArray data = new JSONArray();
						if (cuser.size() > 0) {
							for (Client field : cuser) {
								JSONObject item = new JSONObject();
								item.element("id", field.getId());
								item.element("clientsid", MvcUtil.toJsonString(field.getId()));
								if("3".equals(field.getClientStatus())){
									ResourcesTrackController.hideNum(ruleDe, "contactTel", field.getContactTel(), item);
									ResourcesTrackController.hideNum(ruleDe, "spareTel1", field.getSpareTel1(), item);
									ResourcesTrackController.hideNum(ruleDe, "spareTel2", field.getSpareTel2(), item);
								}else{
									item.element("contactTel", MvcUtil.toJsonString(field.getContactTel()));//客户联系方式
									item.element("spareTel1", MvcUtil.toJsonString(field.getSpareTel1()));//备用电话1
									item.element("spareTel2", MvcUtil.toJsonString(field.getSpareTel2()));//备用电话2
								}
								item.element("clientAdd", MvcUtil.toJsonString(field.getClientAdd()));//客户地址
								if("1".equals(field.getOppType())){//商机类型(1为房贷、2为信贷、3为短借、4为企贷)
									oppType = "房贷";
								}else if("2".equals(field.getOppType())){
									oppType = "信贷";
								}else if("3".equals(field.getOppType())){
									oppType = "短借";
								}else if("4".equals(field.getOppType())){	
									oppType = "企贷";
								}else if("".equals(field.getOppType())||field.getOppType()==null){	
									oppType = " ";
								}
								if("".equals(field.getLoanAmount())||field.getLoanAmount()==null)						{
									dkje="";
								}else{
									dkje=field.getLoanAmount() + "万";
								}
								if("".equals(field.getClientName())||field.getClientName()==null)						{
									khmz="";
								}else{
									khmz=field.getClientName();
								}
								item.element("clientName", MvcUtil.toJsonString(khmz+oppType+dkje));//客户姓名
								if("1".equals(field.getClientStatus())){
									item.element("clientStatus", MvcUtil.toJsonString("已签单"));
								}else if("2".equals(field.getClientStatus())){
									item.element("clientStatus", MvcUtil.toJsonString("未签单"));
								}else if("3".equals(field.getClientStatus())){
									item.element("clientStatus", MvcUtil.toJsonString("淘汰"));
								}else if("4".equals(field.getClientStatus())){
									item.element("clientStatus", MvcUtil.toJsonString("退单"));
								}
								if("1".equals(field.getSignPossible())){//签单可能性(1为100%、2为80%、3为50%、4为0%)
									item.element("signPossible", MvcUtil.toJsonString("100%"));
								}else if("2".equals(field.getSignPossible())){
									item.element("signPossible", MvcUtil.toJsonString("80%"));
								}else if("3".equals(field.getSignPossible())){
									item.element("signPossible", MvcUtil.toJsonString("50%"));
								}else if("4".equals(field.getSignPossible())){
									item.element("signPossible", MvcUtil.toJsonString("10%"));
								}else if("5".equals(field.getSignPossible())){
									item.element("signPossible", MvcUtil.toJsonString("0%"));
								}
								item.element("assignDate", MvcUtil.toJsonString(field.getAssignDate()));//分配日期
								item.element("assignTime", MvcUtil.toJsonString(field.getAssignTime()));//分配时间
								if(field.getClientSourse() != null){
									item.element("clientSource", MvcUtil.toJsonString(field.getClientSourse().getName()));//客户来源
								}
								System.out.println(field.getId()+"*********************************");
								if(field.getFollower() != null){
									emp = field.getFollower().getEmployee();
									if(emp != null){
										item.element("managerUser", MvcUtil.toJsonString(emp.getName()));
									}else{
										item.element("managerUser", MvcUtil.toJsonString(field.getFollower().getCustomerName()));
									}
								}else{
									item.element("managerUser", "");
								}
								item.element("remark", MvcUtil.toJsonString(field.getRemark()));//备注
								data.add(item);
							}
						}
						jsonObject.element("data", data);
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return MvcUtil.jsonObjectModelAndView(jsonObject);
	}
	
	/**
	 * 查找还款记录
	  *<功能简述>
	  *<功能详细描述>	
	  * @return [参数说明]
	  * 
	  * @return ModelAndView [返回类型说明]
	  * @exception throws [异常类型] [异常说明]
	  * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/loadSuccessClient")
	private ModelAndView loadSuccessClient(@ModelAttribute("params")
			GridLoadParams gridLoadParams, HttpServletRequest req, @RequestParam("conditions") String condition){
		JSONObject jsonObject = new JSONObject();
		Pagination pagination = new Pagination();
		pagination.set(gridLoadParams.getStart(), gridLoadParams.getLimit());
		StringBuffer sb = new StringBuffer("");
		String hql = "select c.id, c.follower, c.oppType, c.loanAmount, c.clientName, c.contactTel, c.signTime " +
				"from Client c where c.clientStatus = '1'";
		Long lDepartment = null;	//得到当前登录人的部门信息
		String ruleDe = null;	//得到当前登录人的角色代码 
		Long thisUserId = null;
		try{
			if(req.getSession() != null){
				User userSession = (User) req.getSession().getAttribute("userSession");
				if(condition != null && !"".equals(condition)){
					JSONObject json = JSONObject.fromObject(condition);
					String refundDep = String.valueOf(json.get("refundDep"));
					String refundEmp = String.valueOf(json.get("refundEmp"));
					String opp = String.valueOf(json.get("opp"));
					String client_source = String.valueOf(json.get("client_source"));
					if(refundDep!=null&&!"".equals(refundDep)){
						sb.append(" and c.follower.employee.department.id=").append(refundDep);
					}
					if(refundEmp!=null&&!"".equals(refundEmp)){
						sb.append(" and c.follower.employee.id=").append(refundEmp);
					}
					if(opp != null && !"".equals(opp)){
						sb.append(" and c.oppType = ").append(opp);
					}
					if(client_source != null && !"".equals(client_source)){
						sb.append(" and c.clientSourse =").append(Long.parseLong(client_source));
					}
				}
				if(userSession.getEmployee() != null){
					lDepartment = userSession.getEmployee().getDepartment().getId();
					ruleDe = userSession.getRole().getRoleCode();
					thisUserId = userSession.getId();
					if(ruleDe.equals("201202")){//如果是部门经理，就根据部门id查找该部门下的内容
						sb.append(" and c.follower.employee.department.id = ").append(lDepartment);
					}
					if(ruleDe.equals("201203")){//如果是员工，就根据当前登录人进行查询
						sb.append(" and c.follower.id = ").append(thisUserId);
					}
				}
				sb.append(" order by c.signTime desc");
				List<Object[]> clients = odao.findAll(hql + sb, pagination);
				jsonObject.element("totalCount", pagination.getTotalResults());
				JSONArray data = new JSONArray();
				User user = null;
				if (clients.size() > 0) {
					for (Object[] obj : clients) {
						JSONObject item = new JSONObject();
						item.element("id", obj[0]);
						user = (User)obj[1];
						if(user != null && user.getEmployee() != null){
							item.element("userName",user.getEmployee().getDepartment().getDepaName()+"："+ user.getEmployee().getName());
							item.element("user_depaName", user.getEmployee().getDepartment().getDepaName());
						}
						if("1".equals(obj[2])){//商机类型(1为房贷、2为信贷、3为短借、4为企贷)
							oppType = "房贷";
						}else if("2".equals(obj[2])){
							oppType = "信贷";
						}else if("3".equals(obj[2])){
							oppType = "短借";
						}else if("4".equals(obj[2])){	
							oppType = "企贷";
						}else if("".equals(obj[2]) || obj[2]==null){
							oppType = " ";
						}
						if("".equals(obj[3])||obj[3]==null){
							dkje = "";
						}else{
							dkje = obj[3] + "万";
						}
						if("".equals(obj[4])||obj[4]==null){
							khmz = "";
						}else{
							khmz = obj[4].toString();
						}
						if("201205".equals(ruleDe)){
							item.element("contactTel", MvcUtil.toJsonString("******"));
						}else{
							item.element("contactTel", obj[5]);
						}
						item.element("clientName",khmz+oppType+dkje);
						item.element("signingtime", MvcUtil.toJsonString(obj[6]));
						data.add(item);
					}
				}
				jsonObject.element("data", data);
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return MvcUtil.jsonObjectModelAndView(jsonObject);
	}
}
