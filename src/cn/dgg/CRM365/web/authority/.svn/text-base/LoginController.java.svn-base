package cn.dgg.CRM365.web.authority;

import java.awt.image.BufferedImage;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import cn.dgg.CRM365.domain.authority.Log;
import cn.dgg.CRM365.domain.authority.User;
import cn.dgg.CRM365.domain.owners.Employee;
import cn.dgg.CRM365.util.commonUtil.StaticValues;
import cn.dgg.CRM365.util.commonUtil.StringUtil;
import cn.dgg.CRM365.util.commonUtil.loadingVerificationCodeUtil;
import cn.dgg.CRM365.util.mvc.MvcUtil;
import cn.dgg.CRM365.util.orm.ICommonDAO;
import cn.dgg.CRM365.util.orm.SqlBuilder;
import cn.dgg.CRM365.util.page.GridLoadParams;

/**
 * 用户登录
 * 
 * @author 王科（小）
 * @param <V>
 * 
 */
@Controller
public class LoginController<V> {

	@Autowired
	@Qualifier("commonDAOProxy")
	ICommonDAO<User> dao;

	@Autowired
	@Qualifier("commonDAOProxy")
	ICommonDAO<Log> logDao;

	/***************************************************************************
	 * 获取登录IP
	 * 
	 * @param request
	 * @return
	 */
	private static String getIpAddr(HttpServletRequest request) {
		String ip = request.getHeader("x-forwarded-for");
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("Proxy-Client-IP");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getHeader("WL-Proxy-Client-IP");
		}
		if (ip == null || ip.length() == 0 || "unknown".equalsIgnoreCase(ip)) {
			ip = request.getRemoteAddr();
		}
		if (ip == "0:0:0:0:0:0:1" || "0:0:0:0:0:0:1".equals(ip)) {
			ip = "127.0.0.1";
		}
		return ip;
	}

	
	  /**
	    * 获取登录IP
	    * @return
	    * 王科(大)
	    * 2012-11-14
	    */
	   private static String getIpAddress(){   
	       InetAddress address = null;
		try {
			address = InetAddress.getLocalHost();
		} catch (UnknownHostException e) {
			e.printStackTrace();
		}   
	       return address.getHostAddress();   
	   }  
	/**
	 * 当前登录人，保存到session
	 * 
	 * @param user
	 * @param request
	 *            王科(大) 2012-11-13
	 */
	private void saveInfoToSession(User user, HttpServletRequest request) {
		request.getSession().setAttribute(StaticValues.USER_SESSION, user);
	}
	/**
	 * 找回密码
	 * 
	 * @param request
	 * @param loginId 登陆账号
	 * @param idCardNum 身份证号码
	 * @param mailbox 邮箱
	 * @return
	 * @throws Exception
	 * , @RequestParam("loginId") String loginId,
			@RequestParam("idCardNum") String idCardNum,@RequestParam("mailbox") String mailbox
	 */
	@RequestMapping("/findPwd.do")
	public ModelAndView findPwd(HttpServletRequest request)
			throws Exception {
		String loginId = request.getParameter("loginId");
		String idCardNum = request.getParameter("idCardNum");
		String mailbox = request.getParameter("mailbox");
		JSONObject jsonObject = new JSONObject();
		List<User> daList = dao.findAll("from User u where u.loginId='"+loginId + "'");
		if(daList.size()>0){
			if(!loginId.equals("admin")){
				if(daList.get(0).getEmployee().getIdCardNum().equals(idCardNum)&&daList.get(0).getEmployee().getMailbox().equals(mailbox)){
					jsonObject.element("success", true);
					jsonObject.element("msg", "你的密码是:"+daList.get(0).getPassword());
					return MvcUtil.jsonObjectModelAndView(jsonObject);
				}else{
					jsonObject.element("failure", true);
					jsonObject.element("msg", "身份证号码或邮箱不对");
					return MvcUtil.jsonObjectModelAndView(jsonObject);
				}	
			}else{
				jsonObject.element("success", true);
				jsonObject.element("msg", "admin用户不能找回密码");
				return MvcUtil.jsonObjectModelAndView(jsonObject);
			}
			
		}else{
			jsonObject.element("failure", true);
			jsonObject.element("msg", "没有该用户");
			return MvcUtil.jsonObjectModelAndView(jsonObject);
		}
	}
	/**
	 * 修改密码
	 * @author 王玉川
	 * @param request
	 * @param user 页面封装的数据对象
	 * @param pwd 原始密码
	 * @param _pwd2 确认密码
	 * @param _idCardNum 身份证号码
	 * @param _mailbox 邮箱
	 * @param _qfpwd 区分密码修改状态
	 * @param sd 区分该用户是月份登录还是次数登录		
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/updataPwd.do")
	public ModelAndView updataPwd(HttpServletRequest request, User user,
			@RequestParam("_pwd") String pwd,@RequestParam("_pwd2") String _pwd2,@RequestParam("_idCardNum") String _idCardNum,
			@RequestParam("_mailbox") String _mailbox,@RequestParam("_qfpwd") String _qfpwd,
			@RequestParam("sd") String sd) throws Exception {
		JSONObject jsonObject = new JSONObject();
		List<User> daList = dao.findAll("from User u where u.loginId='"+ user.getLoginId() + "'");
		if(_qfpwd.equals("2")){
			if (pwd.equals(daList.get(0).getPassword())&&
			daList.get(0).getEmployee().getIdCardNum().equals(_idCardNum)&&daList.get(0).getEmployee().getMailbox().equals(_mailbox)) {
				SqlBuilder empsb = new SqlBuilder("User", SqlBuilder.TYPE_UPDATE);
				empsb.addField("password", _pwd2);
				empsb.addField("logionFlag", "1");
				empsb.addWhere("id", daList.get(0).getId());
				dao.updateByHQL(empsb.getSql(), empsb.getParams());
				jsonObject.element("success", true);
				jsonObject.element("msg", "修改密码成功!");
				return MvcUtil.jsonObjectModelAndView(jsonObject);
			}else{
				jsonObject.element("failure", true);
				jsonObject.element("msg", "原始密码不对,或其它信息错误");
				return MvcUtil.jsonObjectModelAndView(jsonObject);
			}
		}else{
			if (pwd.equals(daList.get(0).getPassword())&&_pwd2.equals(user.getPassword())&&
					daList.get(0).getEmployee().getIdCardNum().equals(_idCardNum)&&daList.get(0).getEmployee().getMailbox().equals(_mailbox)) {
				// 设置登录用户id
				user.setId(daList.get(0).getId());
				// 设置员工姓名
				user.setUserName(daList.get(0).getUserName());
				// 设置性别
				user.setSex(daList.get(0).getSex());
				// 设置客户姓名
				user.setCustomerName(daList.get(0).getCustomerName());
				// 设置用户类型
				user.setUserType(daList.get(0).getUserType());
				// 设置最后修改时间
				user.setEndEditTime(daList.get(0).getEndEditTime());
				// 设置用户电话号码
				user.setTelPhone(daList.get(0).getTelPhone());
				// 设置创建人
				user.setCreateUser(daList.get(0).getCreateUser());
				// 设置员工对象
				Employee employee = new Employee();
				employee.setId(daList.get(0).getEmployee().getId());
				user.setEmployee(employee);
				// 设置用户是否停用
				user.setIsOrNotEnable(daList.get(0).getIsOrNotEnable());
				// 设置备注
				user.setRemark(daList.get(0).getRemark());
				// 设置角色对象
				user.setRole(daList.get(0).getRole());
				// 设置登录类型
				user.setLoginType(daList.get(0).getLoginType());
				//设置删除状态
				user.setUserDelState("0");
				if(sd.equals("month")){
				  String start = daList.get(0).getStartTime();
				  String[] gh = start.split("-");
				  String end = daList.get(0).getEndTime();
			      Integer dqyears = 0;
			      String monthHe = "";
			      String ri = "";
			      for(int i=0;i<gh.length;i++){
			    	if(i==0){
			    	  dqyears =  dqyears+Integer.parseInt(gh[i]);
			    	}
			    	if(i==1){
			    		Integer month=Integer.parseInt(gh[i])+Integer.parseInt(end);
				        if(month>12){
				    	   dqyears=dqyears+1;
				    	   month=month-12;
				    	   if(month<10){
				    		   monthHe= "0"+month.toString(); 
				    	   }else{
				    		   monthHe= month.toString(); 
				    	   }
				        }else{
				    	   dqyears=dqyears;
					       monthHe=month.toString();  
				        }
			        }
				    if(i==2){
				    	   ri=gh[i];
					 }
			      }
			      String newTime = dqyears.toString()+"-"+monthHe+"-"+ri;
				  // 设置记录登录次数
				  user.setRecordLogin(daList.get(0).getRecordLogin());
				  // 设置开始时间
				  user.setStartTime(newTime);
				  // 设置结束时间
				  user.setEndTime(end);	
				  // 设置登录次数
				  user.setLoginCount(daList.get(0).getLoginCount());
				}else{
				// 设置记录登录次数
			    user.setRecordLogin("1");
				// 设置开始时间
				 user.setStartTime(daList.get(0).getStartTime());
				// 设置结束时间
				 user.setEndTime(daList.get(0).getEndTime());
				 // 设置登录次数
				 user.setLoginCount(daList.get(0).getLoginCount());
				}
				user.setLogionFlag("1");
				dao.update(user);
				jsonObject.element("success", true);
				jsonObject.element("msg", "修改密码成功!");
				return MvcUtil.jsonObjectModelAndView(jsonObject);
				
			} else {
				jsonObject.element("failure", true);
				jsonObject.element("msg", "原始密码不对！");
				return MvcUtil.jsonObjectModelAndView(jsonObject);
			}
		}
		
	}

	/**
	 * 用户登录
	 * 
	 * @param request
	 * @param user
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/login")
	public ModelAndView loginSystem(HttpServletRequest request, User user)
			throws Exception {
		JSONObject jsonObject = new JSONObject();
		List<User> list = dao.findByHql("from User u where u.loginId = ? and u.password=? and u.isOrNotEnable=? and u.userDelState=?",new Object[] { user.getLoginId(), user.getPassword(),"2","0" });
		List<User> daList = dao.findAll("from User u where u.loginId='"+ user.getLoginId() + "'" + " and u.password='"+ user.getPassword() + "'"+"and u.userDelState='0'");
		List<User> userId=null;
		String delState = "";
		String userDelStae = "";
		if(!user.getLoginId().equals("admin")){
			userId = dao.findAll("from User u where u.loginId='"+user.getLoginId()+"'"+" and u.userDelState='0'");
			if(userId.size()>0){
			    delState = userId.get(0).getEmployee().getDelState();
			    userDelStae = userId.get(0).getUserDelState();
			}
		}
		if (daList != null && daList.size() > 0) {
			String login = daList.get(0).getLoginType();
			String record = daList.get(0).getRecordLogin();
			int sy = 0;
			if (Integer.parseInt(login) == 1) {
				 String start = daList.get(0).getStartTime();
				 String end = daList.get(0).getEndTime();
				SimpleDateFormat currentTime = new SimpleDateFormat(
						"yyyy-MM-dd");
				String currentTimes = currentTime.format(new Date());
				String[] timeArr = currentTimes.split("-");
				String dq = "";
				for (int i = 0; i < timeArr.length; i++) {
					dq += timeArr[i];
				}
				String[] startArr = start.split("-");
			    Integer dqyears = 0;
			    String monthHe = "";
			    String ri = ""; 
				for (int i = 0; i < startArr.length; i++) {
					if(i==0){
						dqyears=dqyears+Integer.parseInt(startArr[i]);
					}
					if(i==1){
				   Integer	month=Integer.parseInt(startArr[i])+Integer.parseInt(end);
						if(month>12){
							dqyears=dqyears+1;
							month=month-12;
							if(month<10){
								monthHe="0"+month.toString();
							}else{
								monthHe=month.toString();
							}
						}else{
							dqyears=dqyears;
							if(month<10){
							    monthHe="0"+month.toString();
							}else{
								monthHe=month.toString();
							}
						}
					}
					if(i==2){
						ri=startArr[i];
					}
				}
				String hestart = dqyears.toString()+monthHe+ri;
				sy = Integer.parseInt(hestart) - Integer.parseInt(dq);
			}
			if (user.getLoginId().equals("admin")&& user.getPassword().equals(daList.get(0).getPassword())) {
				if (list != null && list.size() > 0) {
					if (user.getRemark().equalsIgnoreCase(
							request.getSession().getAttribute("randomCode")
									.toString())) {
						saveInfoToSession(list.get(0), request);
						Log log = new Log();
					    log.setIp(LoginController.getIpAddress());
						log.setLoginId(list.get(0).getLoginId().toString());
						log.setLogTime(new SimpleDateFormat(StringUtil.YMDHMS)
								.format(new Date()));
						log.setUserName(list.get(0).getUserName());
						logDao.save(log);// 保存登录日志
						jsonObject.element("success", true);
						return MvcUtil.jsonObjectModelAndView(jsonObject);
					} else {
						jsonObject.element("failure", true);
						jsonObject.element("msg", "验证码输入错误,请从新输入!");
						return MvcUtil.jsonObjectModelAndView(jsonObject);
					}
				}else{
					jsonObject.element("failure", true);
					jsonObject.element("msg", "用户名或密码输入错误,请从新输入!");
					return MvcUtil.jsonObjectModelAndView(jsonObject);
				}
			} else if (Integer.parseInt(login) == 2) {
				if (Integer.parseInt(record) < Integer.parseInt(daList.get(0).getLoginCount())) {
					if (list != null && list.size() > 0&&delState.equals("0")&&userDelStae.equals("0")) {
						if (user.getRemark().equalsIgnoreCase(
								request.getSession().getAttribute("randomCode")
										.toString())) {
							saveInfoToSession(list.get(0), request);
							Log log = new Log();
						    log.setIp(LoginController.getIpAddress());
						    log.setLoginId(list.get(0).getLoginId().toString());
							log.setLogTime(new SimpleDateFormat(
									StringUtil.YMDHMS).format(new Date()));
							log.setUserName(list.get(0).getUserName());
							logDao.save(log);// 保存登录日志
							Integer he = Integer.parseInt(record) + 1;
							// 设置登录用户id
							user.setId(daList.get(0).getId());
							// 设置员工姓名
							user.setUserName(daList.get(0).getUserName());
							// 设置性别
							user.setSex(daList.get(0).getSex());
							// 设置客户姓名
							user.setCustomerName(daList.get(0)
									.getCustomerName());
							// 设置用户类型
							user.setUserType(daList.get(0).getUserType());
							// 设置最后修改时间
							user.setEndEditTime(daList.get(0).getEndEditTime());
							// 设置用户电话号码
							user.setTelPhone(daList.get(0).getTelPhone());
							// 设置创建人
							user.setCreateUser(daList.get(0).getCreateUser());
							// 设置员工对象
							Employee employee = new Employee();
							employee.setId(daList.get(0).getEmployee().getId());
							user.setEmployee(employee);
							// 设置用户是否停用
							user.setIsOrNotEnable(daList.get(0)
									.getIsOrNotEnable());
							// 设置备注
							user.setRemark(daList.get(0).getRemark());
							// 设置角色对象
							user.setRole(daList.get(0).getRole());
							// 设置登录类型
							user.setLoginType(daList.get(0).getLoginType());
							// 设置记录登录次数
							user.setRecordLogin(he.toString());
							// 设置开始时间
							user.setStartTime(daList.get(0).getStartTime());
							// 设置结束时间
							user.setEndTime(daList.get(0).getEndTime());
							// 设置结束时间
							user.setLoginCount(daList.get(0).getLoginCount());
							// 设置删除状态
							user.setUserDelState(daList.get(0).getUserDelState());
							dao.update(user);
							jsonObject.element("success", true);
							return MvcUtil.jsonObjectModelAndView(jsonObject);
						} else {
							jsonObject.element("failure", true);
							jsonObject.element("msg", "验证码输入错误,请从新输入!");
							return MvcUtil.jsonObjectModelAndView(jsonObject);
						}
					} else {
						jsonObject.element("failure", true);
						jsonObject.element("msg", "用户名密码错误或者该用户已停用！");
						return MvcUtil.jsonObjectModelAndView(jsonObject);
					}
				} else {
					if (list != null && list.size() > 0&&delState.equals("0")&&userDelStae.equals("0")) {
						if (user.getRemark().equalsIgnoreCase(
								request.getSession().getAttribute("randomCode")
										.toString())) {
							saveInfoToSession(list.get(0), request);
							Log log = new Log();
							 log.setIp(LoginController.getIpAddress());
							 log.setLoginId(list.get(0).getLoginId().toString());
							log.setLogTime(new SimpleDateFormat(
									StringUtil.YMDHMS).format(new Date()));
							log.setUserName(list.get(0).getUserName());
							logDao.save(log);// 保存登录日志
							jsonObject.element("success", true);
							jsonObject.element("msg", "2");
							return MvcUtil.jsonObjectModelAndView(jsonObject);
						} else {
							jsonObject.element("failure", true);
							jsonObject.element("msg", "验证码输入错误,请从新输入!");
							return MvcUtil.jsonObjectModelAndView(jsonObject);
						}
					} else {
						jsonObject.element("failure", true);
						jsonObject.element("msg", "用户名密码错误或者该用户已停用！");
						return MvcUtil.jsonObjectModelAndView(jsonObject);
					}

				}
			} else if (Integer.parseInt(login) == 1 && sy < 3&&delState.equals("0")&&userDelStae.equals("0")) {
				if (user.getRemark().equalsIgnoreCase(request.getSession().getAttribute("randomCode").toString())) {
					saveInfoToSession(list.get(0), request);
					Log log = new Log();
					 log.setIp(LoginController.getIpAddress());
					 log.setLoginId(list.get(0).getLoginId().toString());
					log.setLogTime(new SimpleDateFormat(StringUtil.YMDHMS)
							.format(new Date()));
					log.setUserName(list.get(0).getUserName());
					logDao.save(log);// 保存登录日志
					jsonObject.element("success", true);
					jsonObject.element("msg", "3");
					return MvcUtil.jsonObjectModelAndView(jsonObject);
				} else {
					jsonObject.element("failure", true);
					jsonObject.element("msg", "验证码输入错误,请从新输入!");
					return MvcUtil.jsonObjectModelAndView(jsonObject);
				}
			} else if (list != null && list.size() > 0&&delState.equals("0")&&userDelStae.equals("0")) {
				if (user.getRemark().equalsIgnoreCase(request.getSession().getAttribute("randomCode").toString())) {
					saveInfoToSession(list.get(0), request);
					Log log = new Log();
					 log.setIp(LoginController.getIpAddress());
					 log.setLoginId(list.get(0).getLoginId().toString());
					log.setLogTime(new SimpleDateFormat(StringUtil.YMDHMS)
							.format(new Date()));
					log.setUserName(list.get(0).getUserName());
					logDao.save(log);// 保存登录日志
					jsonObject.element("success", true);
					return MvcUtil.jsonObjectModelAndView(jsonObject);
				} else {
					jsonObject.element("failure", true);
					jsonObject.element("msg", "验证码输入错误,请从新输入!");
					return MvcUtil.jsonObjectModelAndView(jsonObject);
				}
			}else{
				jsonObject.element("failure", true);
				jsonObject.element("msg", "用户名或密码输入错误,请从新输入!");
				return MvcUtil.jsonObjectModelAndView(jsonObject);
			}
		}
		jsonObject.element("failure", true);
		jsonObject.element("msg", "用户名或密码输入错误,请从新输入!");
		return MvcUtil.jsonObjectModelAndView(jsonObject);
	}

	/**
	 * 加载验证码
	 * 
	 * @param request
	 * @param mshUser
	 * @return 王科(大) 2012-10-23
	 */
	@RequestMapping(value = "/loginyanzhengma.do")
	public void loadingVerificationCode(HttpServletRequest request,
			HttpServletResponse response) {

		BufferedImage bais = loadingVerificationCodeUtil.createImage();
		// 禁止缓存
		response.setHeader("Pragma", "No-cache");
		response.setHeader("Cache-Control", "No-cache");
		response.setDateHeader("Expires", 0);
		// 指定生成的响应是图片
		response.setContentType("image/jpeg");
		request.getSession().removeAttribute("randomCode");// 销毁验证码
		request.getSession().setAttribute("randomCode",
				loadingVerificationCodeUtil.strCode);// 把验证码存到session
		try {
			ImageIO.write(bais, "JPEG", response.getOutputStream());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 欢迎界面
	 * 
	 * @return
	 */
	@RequestMapping("/to_welcome")
	public ModelAndView to_welcome(@ModelAttribute("params")
			GridLoadParams gridLoadParams, HttpServletRequest request,
			HttpServletResponse response) {
		String _theCurrent = null;
		String _cpid = request.getParameter("_cpid");
		if(request.getSession() != null){
			User user = (User)request.getSession().getAttribute(StaticValues.USER_SESSION);
			String roleCode = user.getRole().getRoleCode();//角色代码
			if("201204".equals(roleCode)){//根据角色的不同权限跳往不同的页面
				return new ModelAndView("authority/userInfo");
			}else if("201206".equals(roleCode) || "201208".equals(roleCode)){
				return new ModelAndView("resourcestrack/resourcestrack");
			}else if("201207".equals(roleCode)){
				return new ModelAndView("replyment/loanDetailInfo");
			}
			if("".equals(request.getParameter("_theCurrent")) || request.getParameter("_theCurrent") == null){
				_theCurrent = "";
			}
			if(_theCurrent == null){
				_theCurrent = "";
			}
			if(_cpid == null){
				_cpid = "";
			}
		}
		return new ModelAndView("common/welcome",_theCurrent,_cpid);
	}
	
	@RequestMapping("/sb")
	public ModelAndView sb() {
		return new ModelAndView("resource/clientStaInfo");
	}

	/**
	 * 
	 * <功能简述> 跳转页面 <功能详细描述>
	 * 
	 * @return [参数说明]
	 * 
	 * @return ModelAndView [返回类型说明]
	 * @exception throws
	 *                [异常类型] [异常说明]
	 * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/to_main")
	public ModelAndView to_main(HttpServletRequest request) {
		String upPwd = request.getParameter("upPwd");
		String loginName = request.getParameter("loginName");
		Map<String, Object> sd = new HashMap();
		if (upPwd != null) {
			sd.put("upPwd", upPwd);
			sd.put("loginName", loginName);
		} else {
			sd.put("upPwd", "1");
		}
		return new ModelAndView("common/main", sd);
	}

	/**
	 * 退出登录
	 * 
	 * @return
	 */
	@RequestMapping("/to_login")
	public ModelAndView reLogin(HttpServletRequest request) {
		try {
			// 清除session
			request.getSession().removeAttribute(StaticValues.USER_SESSION);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("../../index");
	}

	/**
	 * 
	 * <功能简述> 修改密码 <功能详细描述>
	 * 
	 * @param pwd1
	 *            原始密码
	 * @param pwd2
	 *            新密码
	 * @param request
	 * @return [参数说明]
	 * 
	 * @return ModelAndView [返回类型说明]
	 * @exception throws
	 *                [异常类型] [异常说明]
	 * @see [类、类#方法、类#成员]
	 */
	@RequestMapping("/to_updatePwd.do")
	public ModelAndView updatePwd(@RequestParam("_pwd")
	String pwd1, @RequestParam("_rpwd")
	String pwd2, HttpServletRequest request) {
		JSONObject jsonObject = new JSONObject();
		try {
			User sessionUser = (User) request.getSession().getAttribute(
					StaticValues.USER_SESSION);
			List<User> list = dao.findByHql("from User u where u.loginId = ? and u.password=? and u.isOrNotEnable=?",new Object[] { sessionUser.getLoginId(), pwd1, "2" });
			if (list != null && list.size() > 0) {
				SqlBuilder sqlBuilder = new SqlBuilder("User",
						SqlBuilder.TYPE_UPDATE);
				sqlBuilder.addField("password", pwd2);
				sqlBuilder.addWhere("id", sessionUser.getId());
				dao.updateByHQL(sqlBuilder.getSql(), sqlBuilder.getParams());
				jsonObject.element("success", true);
			} else {
				jsonObject.element("success", false);
				jsonObject.element("msg", "您输入的原始密码有错！");
				return MvcUtil.jsonObjectModelAndView(jsonObject);
			}

		} catch (Exception e) {
			jsonObject.element("success", false);
			jsonObject.element("msg", "修改密码出错！");
			e.printStackTrace();
		}

		return MvcUtil.jsonObjectModelAndView(jsonObject);
	}

	public ICommonDAO<User> getDao() {
		return dao;
	}

	public void setDao(ICommonDAO<User> dao) {
		this.dao = dao;
	}
public static void main(String[] args) {
	String df="09";
	System.out.println(Integer.parseInt(df));
}
}
